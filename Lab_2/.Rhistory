ggplot(data=mpg)
nrows(mpg)
mpg.rows()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = year))
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke = year))
ggplot(data = mpg) +
geom_point(mapping = aes(color = displ < 5)
ggplot(data = mpg) +
geom_point(mapping = aes(color = displ < 5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,y = hwy)) +
facet_grid(~class, nrow = 2)
facet_grid(~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,y = hwy)) +
facet_grid(~class)
install.packages("ggmap")
library(xlsx2)
install.packages("xlsx")
library(xlsx)
urlfile <- "https://data.cdc.gov/api/views/rqg5-mkef/rows.csv?accessType=DOWNLOAD"
destfile <- "data.csv"
download.file(urlfile,destfile, method = curl)
download.file(urlfile,destfile, mode = "wb")
urlfile <- "https://data.cdc.gov/api/views/rqg5-mkef/rows.csv?accessType=DOWNLOAD"
download.file(urlfile,destfile="./motor.csv", method = "curl")
load("motor.csv")
motor_data <- read.csv("./motor.csv")
View(motor_data)
names(motor_data)
View(motor_data)
?grep
test <- grep((//,//),motor_data[,2])
test <- grep("(//,//)",motor_data[,2])
head(motor_data[,2])
install.packages("gpclib")
install.packages("rgeos")
install.packages("maptools")
install.packages("rgdal")
install.packages("ggplot2")
install.packages("spatialEco")
install.packages("dplyr")
install.packages("ggmap")
install.packages("ggthemes")
install.packages("RColorBrewer")
library("reshape2")
p1 <- melt(motor_data, id.vars = "State")
View(p1)
?arrange
library(ggplot2)
install.packages(ggplot2)"ggplot2"
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data(mpg)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
dtype(drv)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = clarity))
pwd
pwd()
wd()
cwd()
wd
getwd()
install.packages("shiny")
shiny::runApp('Shiny Practice/Simplest')
data(mpg)
data("mtcars")
library(ggplot2)
ggplot(data = mtcars) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = class, size = displ))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class, alpha = displ, size = class))
library(ggplot2)
library(dplyr)
us <- map_data("state")
arr <- USArrests %>%
add_rownames("region") %>%
mutate(region = tolower(region))
gg <- ggplot()
gg <- gg + geom_map(data = us, map = us,
aes(x = long, y = lat, map_id = region),
fill = "#ffffff", color = "#ffffff", size = 0.15)
gg <- gg +geom_map(data = arr, map = us,
aes(fill = Murder, map_id = region),
color ="#ffffff", size = 0.15)
gg <- gg + scale_fill_continuous(low='thistle2', high='darkred',
guide='colorbar')
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + coord_map("albers", lat0 = 39, lat1 = 45)
gg <- gg + theme(panel.border = element_blank())
gg <- gg + theme(panel.background = elemenent_blank())
gg <- gg + theme(panel.background = element_blank())
gg <- gg + theme(axis.ticks = element_blank())
gg <- gg + theme(axis.text = element_blank())
gg
install.packages("hflights", "dplyr", "ggplot2", "plotly")
install.packages("hflights", "dplyr", "ggplot2", "plotly")
library(dplyr)
install.packages("hflights")
library(ggplot2)
install.packages("plotly")
install.packages("hflights")
library(hflights)
data("hflights")
hflights
View(hflights)
library(dplyr)
library(ggplot2)
library(plotly)
library(hflights)
summary(hflights)
flights_clean <- hflights %>%
na.omit()
hflights %>% # Read %>% as 'then'
filter(Month == 1 & DayofMonth == 1)
View(flights_clean)
summary(hflights)
hflights %>%
group_by(Month) %>%
summarise(nflights = n()) %>%
mutate(nflightdiff = nflights - lag(nflights),
nflightdiff = ifelse(is.na(nflightdiff), 0, nflightdiff))
hflights %>%
ggplot(aes(x = DepTime, y = DepDelay)) + geom_point()
hflights %>%
group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
ggplot(aes(x = Dest, y = avgDepDelay)) + geom_bar(stat = "identity")
hflights %>%
group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
View(hflights)
hflights %>%
group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
dplyr::group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
(function(df) group_by(df$Dest)) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
group_by(df$Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>% select(Dest)
hflights %>%
dplyr::group_by(Dest)
hflights %>%
dplyr::group_by(Dest) %>%
summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
dplyr::group_by(Dest) %>%
dplyr::summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plotly::plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
dplyr::group_by(Dest) %>%
dplyr::summarise(avgDepDelay = mean(DepDelay, na.rm = T))
hflights %>%
dplyr::group_by(Dest) %>%
dplyr::summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
plot_ly(x = Dest, y = avgDepDelay, type = "bar")
hflights %>%
dplyr::group_by(Dest) %>%
dplyr::summarise(avgDepDelay = mean(DepDelay, na.rm = T)) %>%
#filter(avgDepDelay >= 0 ) %>%
(function(df) plot_ly(df, x = df$Dest, y = df$avgDepDelay, type = "bar"))
brexit.data <- read.csv("uk_data.csv")
names(brexit.data)
brexit.data <- read.csv(./"uk_data.csv")
names(brexit.data)
brexit.data <- read.csv("/Users/abhi/Downloads/uk_data.csv")
names(brexit.data)
pairs(brexit.data[, -1], pch = 19, cex = .7, upper.panel = NULL)
output <- lm(pct_remain ~ uk_born + no_edu + mfct +
finance + over_60 + over_20_less_than35, data = brexit.data)
summary(output)
confint(output, level = .95)
install.packages(RPostgreSQL)
install.packages("RPostgreSQL")
matrix('NA', nrow = 3, ncol = 4)
library(datasets)
datasets::email50
library(email50)
data(email50)
pnorm(1.2857)*100
pnorm(0.5215)*100
xseq <- seq(-4,4,.01)
densities  <- dnorm(xseq, 0, 1)
plot(xseq, densities, col = "darkgreen", xlab = "", ylab = "Density", type = "l", lwd = 2, main = "Standard Normal")
abline(v = 1.2857,col = "red", xlab = 'Verbal')
abline(v = 0.5215,col = "blue")
?legend
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$ratings)
#Median
median(ratings)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$ra)
View(ratings)
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(ratings$rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(ratings$rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
#Plot histogram
hist(ratings$rating)
ix <- match(ratings$movieId, movies$movieId)
head(ix)
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
movies <- read.csv("movies.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(ratings$rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
#Plot histogram
hist(ratings$rating)
ix <- match(ratings$movieId, movies$movieId)
head(ix)
movies <- read.csv("movies.csv")
ix <- match(ratings$movieId, movies$movieId)
head(ix)
movies <- read.csv("movies.csv")
ix <- match(ratings$movieId, movies$movieId)
ix
movies <- read.csv("movies.csv")
d1 <- match(ratings$movieId, movies$movieId)
d1
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
movies <- read.csv("movies.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(ratings$rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
#Plot histogram
hist(ratings$rating)
setwd("/Users/abhi/Data_Science_1/Lab_2/")
ratings <- read.csv("ratings.csv")
movies <- read.csv("movie.titles.csv")
dim(ratings)
users <- unique(ratings$userId)
d <- ratings[users,]
dim(d)
#Mean
mean(ratings$rating)
#Median
median(ratings$rating)
#Mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(ratings$rating)
#Plot histogram
hist(ratings$rating)
d1 <- match(ratings$movieId, movies$movieId)
d1
plot(ratings$year, ratings$rating)
plot(ratings$year, ratings$rating)
boxplot(year ~ rating, data = ratings)
plot(ratings$year, ratings$rating)
boxplot(rating ~ year, data = ratings)
plot(ratings$year, ratings$rating)
boxplot(rating ~ cut(year), data = ratings)
?cut
plot(ratings$year, ratings$rating)
boxplot(rating ~ cut(year), data = ratings)
plot(ratings$year, ratings$rating)
boxplot(rating ~ year, data = ratings)
?cut
plot(ratings$year, ratings$rating)
boxplot(rating ~ cut(year,breaks = 5), data = ratings)
boxplot(rating ~ cut(year,breaks = 2), data = ratings)
boxplot(rating ~ cut(year,breaks = 10), data = ratings)
?match
ix <- match(ratings$movieId, movies$movieId)
d1 <- ratings[ix,]
d2 <- movies[ix,]
head(d1)
head(d2)
View(d1)
View(d2)
ix <- match(ratings$movieId, movies$movieId)
head(ratings$movieId)
head(movies$movieId[ix])
?merge
ix <- match(ratings$movieId, movies$movieId)
head(ratings$movieId)
head(movies$movieId[ix])
temp <- merge(ratings, movies, by = 'movieId')
View(temp)
# a) Do the ratings vary by genre? Create a ‘comedy’ column and draw a box plot of ratings for comedy versus others:
ratings$comedy <- rep(F, nrow=ratings)
ratings$comedy[grep("comedy",ratings$genre,ignore.case = T)] <- T
boxplot(rating ~ comedy, data=ratings)
View(movies)
View(ratings)
sorted_temp <- temp[order(rating),]
head(sorted_temp$title)
sorted_temp <- temp[order(rating),]
sorted_temp <- temp[order(temp$rating),]
View(sorted_temp)
''?order
sorted_temp <- temp[order(-temp$rating),]
View(sorted_temp)
?head
sorted_temp <- temp[order(-temp$rating),]
head(sorted_temp$title, n = 10)
sorted_ratings <- ratings[order(-ratings$rating),]
head(sorted_ratings$movieId, n = 10)
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_movie <- movies[top_ten_id,]
top_ten_movie
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_movie <- movies[top_ten_id,title]
top_ten_movie
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_id
top_ten_movie <- movies[top_ten_id,title]
top_ten_movie
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_id
top_ten_movie <- movies$title[top_ten_id,]
top_ten_movie
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_id
bool_vec <- [top_ten_id == movies$movieId]
top_ten_movie <- movies$title[bool_vec,]
top_ten_movie
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_id
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,],title]
top_ten_movie
View(sorted_ratings)
View(top_ten_movie)
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
top_ten_id
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,],title]
top_ten_movie$title
View(top_ten_movie)
?rexp
hist(rexp(1000))
x<- seq(-100,100,1000)
?runif
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,],title]
top_ten_movie$title
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,],]
top_ten_movie$title
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,]]
top_ten_movie$title
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec,]]
top_ten_movie$title
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[movies[bool_vec]]
top_ten_movie$title
sorted_ratings <- ratings[order(-ratings$rating),]
top_ten_id<- head(sorted_ratings$movieId, n = 10)
bool_vec <- top_ten_id == movies$movieId
top_ten_movie <- movies[bool_vec]
top_ten_movie$title
